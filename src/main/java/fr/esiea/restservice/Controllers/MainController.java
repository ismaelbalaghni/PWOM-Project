package fr.esiea.restservice.Controllers;

import fr.esiea.restservice.Data.MeetingPlacesRepository;
import fr.esiea.restservice.Data.SurveyRepository;
import fr.esiea.restservice.Data.UserSurveyRepository;
import fr.esiea.restservice.Model.*;
import fr.esiea.restservice.Data.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.persistence.PostRemove;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;

@RestController
@RequestMapping(path = "/app")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private SurveyRepository surveyRepository;
    @Autowired
    private MeetingPlacesRepository meetingPlacesRepository;
    @Autowired
    private UserSurveyRepository userSurveyRepository;

    private Token userToken;

    @PostMapping(path="/signup") // MAP POST signup request
    public @ResponseBody String signUpUser(@RequestParam String name, @RequestParam String email, @RequestParam String login, @RequestParam String password) throws NoSuchAlgorithmException {
        // Fonction qui se charge de gérer l'inscription d'un utilisateur
        User user = new User();
        user.setName(name);
        user.setEmail(email);
        user.setUserLogin(login);
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] hashedUserPassword = digest.digest(password.getBytes());
        String userPassword = new String(hashedUserPassword, StandardCharsets.UTF_8);
        user.setUserPassword(userPassword);
        userRepository.save(user);
        return "\n"+name+" signed up.\n";
    }

    @PostMapping(path="/login") // MAP POST login request
    public @ResponseBody Token loginUser(@RequestParam String login, @RequestParam String password) throws NoSuchAlgorithmException {
        // Fonction qui se charge de gérer le login d'un utilisateur
        String token = null;
        SecureRandom random = new SecureRandom();
        Base64.Encoder encoder = Base64.getUrlEncoder();
        byte[] randomBytes = new byte[24];
        random.nextBytes(randomBytes);
        User requestedUser = userRepository.findByUserLogin(login);
        if (requestedUser.getUserLogin().equals(login)){
            MessageDigest digest = MessageDigest.getInstance("MD5");
            byte[] hashedUserPassword = digest.digest(password.getBytes());
            String verifyPassword = new String(hashedUserPassword, StandardCharsets.UTF_8);
            if (requestedUser.getUserPassword().equals(verifyPassword)){
                token = encoder.encodeToString(randomBytes);
                userToken = new Token(token);
            } else {
                userToken = null;
            }
        }
        return userToken;
    }

    @PostMapping(path = "/create_survey")
    public @ResponseBody String createSurvey(@RequestParam String userLogin, @RequestParam Integer meetPlaceID, @RequestParam String meetDate) throws ParseException {
        User loggedUser = userRepository.findByUserLogin(userLogin);
        LocalDateTime actualTime = LocalDateTime.now();
        String response;
        if(userToken.getDateExpiring().isAfter(actualTime)){
            Survey userSurvey = new Survey(meetPlaceID, meetDate);
            surveyRepository.save(userSurvey);
            System.out.println(userSurvey.getSurveyId());
            userSurvey.setUserId(loggedUser.getId());
            UserSurvey userSurveyLink = new UserSurvey(loggedUser.getId(), userSurvey.getSurveyId());
            userSurveyRepository.save(userSurveyLink);
            response = "Survey created";
        } else {
            if(userToken.renewToken()){
                Survey userSurvey = new Survey(meetPlaceID, meetDate);
                surveyRepository.save(userSurvey);
                System.out.println(userSurvey.getSurveyId());
                userSurvey.setUserId(loggedUser.getId());
                UserSurvey userSurveyLink = new UserSurvey(loggedUser.getId(), userSurvey.getSurveyId());
                userSurveyRepository.save(userSurveyLink);
                response = "Survey created";
            } else {
                response = "ERROR, TOKEN COULD NOT BE RENEWED";
            }
        }

        return response;
    }

    @PostMapping(path = "/delete_survey")
    public @ResponseBody String deleteSurvey(@RequestParam String userLogin, @RequestParam Integer userSurveyId){
        Survey userSurvey = surveyRepository.findSurveyBySurveyId(userSurveyId);
        User loggedUser = userRepository.findByUserLogin(userLogin);
        LocalDateTime actualTime = LocalDateTime.now();
        String response;
        if(userToken.getDateExpiring().isAfter(actualTime)){
            UserSurvey userSurveyLink = userSurveyRepository.findUserSurveyBySurveyIdAndUserId(userSurveyId, loggedUser.getId());
            surveyRepository.delete(userSurvey);
            userSurveyRepository.delete(userSurveyLink);
            response = "Survey deleted";
        } else {
            if(userToken.renewToken()){
                UserSurvey userSurveyLink = userSurveyRepository.findUserSurveyBySurveyIdAndUserId(userSurveyId, loggedUser.getId());
                surveyRepository.delete(userSurvey);
                userSurveyRepository.delete(userSurveyLink);
                response = "Survey deleted";
            } else {
                response = "ERROR, TOKEN COULD NOT BE RENEWED";
            }
        }
        return response;
    }

    @GetMapping(path = "/show_user_surveys/{userLogin}")
    public @ResponseBody Iterable<Survey> getUserSurveys(@PathVariable String userLogin){
        User loggedUser = userRepository.findByUserLogin(userLogin);
        ArrayList<Survey> userSurveys = new ArrayList<>();
        LocalDateTime actualTime = LocalDateTime.now();
        ArrayList<Survey> response = new ArrayList<>();
        if(userToken.getDateExpiring().isAfter(actualTime)){
            for(UserSurvey userSurveyLink : userSurveyRepository.findAllByUserId(loggedUser.getId())){
                Survey survey = surveyRepository.findSurveyBySurveyId(userSurveyLink.getSurveyId());
                userSurveys.add(survey);
            }
            response = userSurveys;
        } else {
            if(userToken.renewToken()){
                for(UserSurvey userSurveyLink : userSurveyRepository.findAllByUserId(loggedUser.getId())){
                    Survey survey = surveyRepository.findSurveyBySurveyId(userSurveyLink.getSurveyId());
                    userSurveys.add(survey);
                }
                response = userSurveys;
            } else {
                response = null;
            }
        }
        return response;
    }

    @GetMapping(path = "/vote_survey/{surveyId}")
    public @ResponseBody boolean voteForSurvey(@PathVariable Integer surveyId){
        Survey survey = surveyRepository.findSurveyBySurveyId(surveyId);
        return survey.addVote();
    }

    @GetMapping(path = "/get_survey_votes/{surveyId}")
    public @ResponseBody Integer getSurveyVotes(@PathVariable Integer surveyId){
        Survey survey = surveyRepository.findSurveyBySurveyId(surveyId);
        return survey.getVotes();
    }

    @PostMapping("/add_meeting_place")
    public @ResponseBody String addMeetingPlace(@RequestParam String placeName, @RequestParam String placeAddress, @RequestParam String placeWebsite){
        MeetPlace meetPlace = new MeetPlace(placeName, placeAddress, placeWebsite);
        LocalDateTime actualTime = LocalDateTime.now();
        String response;
        if(userToken.getDateExpiring().isAfter(actualTime)){
            meetingPlacesRepository.save(meetPlace);
            response = "Meeting place added";
        } else {
            if(userToken.renewToken()){
                meetingPlacesRepository.save(meetPlace);
                response = "Meeting place added";
            } else {
                response = "ERROR, TOKEN COULD NOT BE RENEWED";
            }
        }
        meetingPlacesRepository.save(meetPlace);
        return response;
    }

    @GetMapping("/get_meeting_places/")
    public @ResponseBody Iterable<MeetPlace> getMeetingPlaces(){
        return meetingPlacesRepository.findAll();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
